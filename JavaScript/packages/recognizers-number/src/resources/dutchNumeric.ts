// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

import { BaseNumbers } from "./baseNumbers";
export namespace DutchNumeric {
	export const LangMarker = 'Ned';
	export const RoundNumberIntegerRegex = `(honderd|duizend|miljoen|miljard|biljoen)`;
	export const ZeroToNineIntegerRegex = `(drie|zeven|acht|vier|vijf|nul|negen|een|twee|zes)`;
	export const NegativeNumberTermsRegex = `((min|negatief)\\s+)`;
	export const NegativeNumberSignRegex = `^${NegativeNumberTermsRegex}.*`;
	export const AnIntRegex = `(een)(?=\\s)`;
	export const TenToNineteenIntegerRegex = `(zeventien|dertien|veertien|achttien|negentien|vijftien|zestien|elf|twaalf|tien)`;
	export const TensNumberIntegerRegex = `(zeventig|twintig|dertig|tachtig|negentig|veertig|vijftig|zestig)`;
	export const SeparaIntRegex = `(((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex})(\\s+${RoundNumberIntegerRegex})*))|((${AnIntRegex}(\\s+${RoundNumberIntegerRegex})+))`;
	export const AllIntRegex = `((((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*${SeparaIntRegex})`;
	export const PlaceHolderPureNumber = `\\b`;
	export const PlaceHolderDefault = `\\D|\\b`;
	export const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!(\\.\\d+[a-zA-Z]))(?=${placeholder})`; }
	export const NumbersWithSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*(K|k|M|T|G)(?=\\b)`;
	export const RoundNumberIntegerRegexWithLocks = `(?<=\\b)\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
	export const NumbersWithDozenSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dozen(s)?(?=\\b)`;
	export const AllIntRegexWithLocks = `((?<=\\b)${AllIntRegex}(?=\\b))`;
	export const AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((half\\s+)?a\\s+dozen)|(${AllIntRegex}\\s+dozen(s)?))(?=\\b)`;
	export const RoundNumberOrdinalRegex = `(honderdste|duizendste|miljoenste|miljardste|biljoenste)`;
	export const BasicOrdinalRegex = `(eerste|tweede|derde|vierde|vijfde|zesde|zevende|achtste|negende|tiende|elfde|twaalfde|dertiende|veertiende|vijftiende|zestiende|zeventiende|achttiende|negentiende|twintigste|dertigste|veertigste|vijftigste|zestigste|zeventigste|tachtigste|negentigste)`;
	export const SuffixBasicOrdinalRegex = `(((((${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*(${TensNumberIntegerRegex}(\\s+|\\s*-\\s*))?${BasicOrdinalRegex})`;
	export const SuffixRoundNumberOrdinalRegex = `((${AllIntRegex}\\s+)${RoundNumberOrdinalRegex})`;
	export const AllOrdinalRegex = `(${SuffixBasicOrdinalRegex}|${SuffixRoundNumberOrdinalRegex})`;
	export const OrdinalSuffixRegex = `(?<=\\b)((\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\b)`;
	export const OrdinalNumericRegex = `(?<=\\b)(\\d{1,3}(\\s*,\\s*\\d{3})*\\s*th)(?=\\b)`;
	export const OrdinalRoundNumberRegex = `(?<!(a|an)\\s+)${RoundNumberOrdinalRegex}`;
	export const OrdinalEnglishRegex = `(?<=\\b)${AllOrdinalRegex}(?=\\b)`;
	export const FractionNotationWithSpacesRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
	export const FractionNotationRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
	export const FractionNounRegex = `(?<=\\b)(${AllIntRegex}\\s+(and\\s+)?)?(${AllIntRegex})(\\s+|\\s*-\\s*)(((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\b)`;
	export const FractionNounWithArticleRegex = `(?<=\\b)(${AllIntRegex}\\s+(and\\s+)?)?(a|an|one)(\\s+|\\s*-\\s*)(?!\\bfirst\\b|\\bsecond\\b)((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex})|half|quarter)(?=\\b)`;
	export const FractionPrepositionRegex = `(?<=\\b)((${AllIntRegex})|((?<!\\.)\\d+))\\s+over\\s+((${AllIntRegex})|(\\d+)(?!\\.))(?=\\b)`;
	export const AllPointRegex = `((\\s+${ZeroToNineIntegerRegex})+|(\\s+${SeparaIntRegex}))`;
	export const AllFloatRegex = `${AllIntRegex}(\\s+point)${AllPointRegex}`;
	export const DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s*(K|k|M|G|T|B|b)(?=\\b)`;
	export const DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)`;
	export const DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)`;
	export const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; }
	export const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\s|^)(?<!(\\d+))\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; }
	export const DoubleWithRoundNumber = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
	export const DoubleAllFloatRegex = `((?<=\\b)${AllFloatRegex}(?=\\b))`;
	export const CurrencyRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)`;
	export const NumberWithSuffixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\s*)(%|procent|percentage)`;
	export const NumberWithPrefixPercentage = `(percentage van|procent van|procenten van)(\\s*)(${BaseNumbers.NumberReplaceToken})`;
	export const TillRegex = `(tot|--|-|—|——|~)`;
	export const MoreRegex = `((groter|hoger|meer)(\\s+dan|\\s+als)?|boven|over|>)`;
	export const LessRegex = `((minder|lager|kleiner)(\\s+dan|\\s+als)?|beneden|onder|<)`;
	export const EqualRegex = `(gelijk(\\s+(aan|als))?|=)`;
	export const MoreOrEqual = `((${MoreRegex}\\s+or\\s+${EqualRegex})|at\\s+least|no\\s+${LessRegex}|>\\s*=)`;
	export const MoreOrEqualSuffix = `(en|of)\\s+(meer|groter|hoger|grotere)(?!\\s+than)`;
	export const LessOrEqual = `((${LessRegex}\\s+or\\s+${EqualRegex})|at\\s+most|no\\s+${MoreRegex}|<\\s*=)`;
	export const LessOrEqualSuffix = `(en|of)\\s+(minder|lager|kleiner)(?!\\s+than)`;
	export const OneNumberRangeMoreRegex1 = `(${MoreOrEqual}|${MoreRegex})\\s*(the\\s+)?(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)`;
	export const OneNumberRangeMoreRegex2 = `(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)\\s*${MoreOrEqualSuffix}`;
	export const OneNumberRangeLessRegex1 = `(${LessOrEqual}|${LessRegex})\\s*(the\\s+)?(?<number2>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)`;
	export const OneNumberRangeLessRegex2 = `(?<number2>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)\\s*${LessOrEqualSuffix}`;
	export const OneNumberRangeEqualRegex = `${EqualRegex}\\s*(the\\s+)?(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)`;
	export const TwoNumberRangeRegex1 = `between\\s*(the\\s+)?(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)\\s*and\\s*(the\\s+)?(?<number2>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)`;
	export const TwoNumberRangeRegex2 = `(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})\\s*(and|but|,)\\s*(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})`;
	export const TwoNumberRangeRegex3 = `(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})\\s*(and|but|,)\\s*(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})`;
	export const TwoNumberRangeRegex4 = `(from\\s+)?(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+))|\\bfrom\\b)).)+)\\s*${TillRegex}\\s*(the\\s+)?(?<number2>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)`;
	export const DecimalSeparatorChar = ',';
	export const FractionMarkerToken = 'over';
	export const NonDecimalSeparatorChar = '.';
	export const HalfADozenText = 'zes';
	export const WordSeparatorToken = 'en';
	export const WrittenDecimalSeparatorTexts = [ 'punt' ];
	export const WrittenGroupSeparatorTexts = [ 'punto' ];
	export const WrittenIntegerSeparatorTexts = [ 'en' ];
	export const WrittenFractionSeparatorTexts = [ 'en' ];
	export const HalfADozenRegex = `half\\s+dozijn`;
	export const DigitalNumberRegex = `((?<=\\b)(honderd|duizend|miljoen|miljard|biljoen|dozijn?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g|b)(?=\\b))`;
	export const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["nul", 0],["een", 1],["één", 1],["twee", 2],["drie", 3],["vier", 4],["vijf", 5],["zes", 6],["zeven", 7],["acht", 8],["negen", 9],["tien", 10],["elf", 11],["twaalf", 12],["dozijn", 12],["dertien", 13],["veertien", 14],["vijftien", 15],["zestien", 16],["zeventien", 17],["achttien", 18],["negentien", 19],["twintig", 20],["dertig", 30],["veertig", 40],["vijftig", 50],["zestig", 60],["zeventig", 70],["tachtig", 80],["negentig", 90],["honderd", 100],["gros", 144],["duizend", 1000],["miljoen", 1000000],["miljard", 1000000000],["biljoen", 1000000000000]]);
	export const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["eerste", 1],["tweede", 2],["secundair", 2],["derde", 3],["vierde", 4],["kwart", 4],["vijfde", 5],["zesde", 6],["zevende", 7],["achtste", 8],["negende", 9],["tiende", 10],["elfde", 11],["twaalfde", 12],["dertiende", 13],["veertiende", 14],["vijftiende", 15],["zestiende", 16],["zeventiende", 17],["achttiende", 18],["negentiende", 19],["twintigste", 20],["dertigste", 30],["veertigste", 40],["vijftigste", 50],["zestigste", 60],["zeventigste", 70],["tachtigste", 80],["negentigste", 90],["honderdste", 100],["duizendste", 1000],["miljoenste", 1000000],["miljardste", 1000000000],["biljoenste", 1000000000000]]);
	export const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["honderd", 100],["duizend", 1000],["miljoen", 1000000],["miljard", 1000000000],["biljoen", 1000000000000],["honderdste", 100],["duizendste", 1000],["miljoenste", 1000000],["miljardste", 1000000000],["biljoenste", 1000000000000],["honderdsten", 100],["duizendsten", 1000],["miljoensten", 1000000],["miljardsten", 1000000000],["biljoensten", 1000000000000],["dozijn", 12],["gros", 144],["k", 1000],["m", 1000000],["g", 1000000000],["b", 1000000000],["t", 1000000000000]]);
}
