---
TillRegex: !simpleRegex
  def: (?<till>to|till|til|until|thru|through|--|-|—|——|~)
RangeConnectorRegex : !simpleRegex
  def: (?<and>and|through|to|--|-|—|——)
RelativeRegex: !simpleRegex
  def: (?<order>next|coming|upcoming|this|last|past|previous|current|the|my)
StrictRelativeRegex: !simpleRegex
  def: (?<order>next|coming|upcoming|this|last|past|previous|current)
NextPrefixRegex: !simpleRegex
  def: (next|coming|upcoming)\b
AfterNextSuffixRegex: !simpleRegex
  def: \b(after\s+(the\s+)?next)\b
PastPrefixRegex: !simpleRegex
  def: (last|past|previous)\b
ThisPrefixRegex: !simpleRegex
  def: (this|current)\b
FutureSuffixRegex: !simpleRegex
  def: \b(in\s+the\s+)?(future|hence)\b
DayRegex: !simpleRegex
  def: (the\s*)?(?<day>01|02|03|04|05|06|07|08|09|10th|10|11th|11st|11|12nd|12th|12|13rd|13th|13|14th|14|15th|15|16th|16|17th|17|18th|18|19th|19|1st|1|20th|20|21st|21|22nd|22|23rd|23|24th|24|25th|25|26th|26|27th|27|28th|28|29th|29|2nd|2|30th|30|31st|31|3rd|3|4th|4|5th|5|6th|6|7th|7|8th|8|9th|9)(?=\b|t)
MonthNumRegex: !simpleRegex
  def: (?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\b
CenturyRegex: !simpleRegex
  def: \b(?<century>((one|two)\s+thousand(\s+and)?(\s+(one|two|three|four|five|six|seven|eight|nine)\s+hundred(\s+and)?)?)|((twenty one|twenty two|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty)(\s+hundred)?(\s+and)?))\b
WrittenNumRegex: !simpleRegex
  def: (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fourty|fifty|sixty|seventy|eighty|ninety)
FullTextYearRegex: !nestedRegex
  def: \b((?<firsttwoyearnum>{CenturyRegex})\s+(?<lasttwoyearnum>((zero|twenty|thirty|forty|fourty|fifty|sixty|seventy|eighty|ninety)\s+{WrittenNumRegex})|{WrittenNumRegex}))\b|\b(?<firsttwoyearnum>{CenturyRegex})\b
  references: [ CenturyRegex, WrittenNumRegex ]
MinYearNum: '1500'
MaxYearNum: '2100'
YearNumRegex: !simpleRegex
  def: \b(?<year>((1[5-9]|20)\d{2})|2100)\b
YearRegex: !nestedRegex
  def: ({YearNumRegex}|{FullTextYearRegex})
  references: [ YearNumRegex, FullTextYearRegex ]
WeekDayRegex: !simpleRegex
  def: \b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tues|Tue|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|Sat|Sun)\b
SingleWeekDayRegex: !simpleRegex
  def: \b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tue|Tues|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|((?<=on)\s+(Sat|Sun)))\b
RelativeMonthRegex: !nestedRegex
  def: (?<relmonth>(of\s+)?{RelativeRegex}\s+month)\b
  references: [RelativeRegex]
WrittenMonthRegex: !simpleRegex
  def: (((the\s+)?month of\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep))
MonthSuffixRegex: !nestedRegex
  def: (?<msuf>(in\s+|of\s+|on\s+)?({RelativeMonthRegex}|{WrittenMonthRegex}))
  references: [ RelativeMonthRegex, WrittenMonthRegex ]
DateUnitRegex: !simpleRegex
  def: (?<unit>years|year|months|month|weeks|week|days|day)\b
SimpleCasesRegex: !nestedRegex
  def: \b((from|between)\s+)?({DayRegex})\s*{TillRegex}\s*({DayRegex}\s+{MonthSuffixRegex}|{MonthSuffixRegex}\s+{DayRegex})((\s+|\s*,\s*){YearRegex})?\b
  references: [ DayRegex, TillRegex, MonthSuffixRegex, YearRegex ]
MonthFrontSimpleCasesRegex: !nestedRegex
  def: \b((from|between)\s+)?{MonthSuffixRegex}\s+((from|between)\s+)?({DayRegex})\s*{TillRegex}\s*({DayRegex})((\s+|\s*,\s*){YearRegex})?\b
  references: [ MonthSuffixRegex, DayRegex, TillRegex, YearRegex ]
MonthFrontBetweenRegex: !nestedRegex
  def: \b{MonthSuffixRegex}\s+(between\s+)({DayRegex})\s*{RangeConnectorRegex}\s*({DayRegex})((\s+|\s*,\s*){YearRegex})?\b
  references: [ MonthSuffixRegex, DayRegex, RangeConnectorRegex , YearRegex ]
BetweenRegex: !nestedRegex
  def: \b(between\s+)({DayRegex})\s*{RangeConnectorRegex}\s*({DayRegex})\s+{MonthSuffixRegex}((\s+|\s*,\s*){YearRegex})?\b
  references: [ DayRegex, RangeConnectorRegex , MonthSuffixRegex, YearRegex ]
MonthWithYear: !nestedRegex
  def: \b(({WrittenMonthRegex}(\s*),?(\s+of)?(\s*)({YearRegex}|(?<order>next|last|this)\s+year))|(({YearRegex}|(?<order>next|last|this)\s+year)(\s*),?(\s*){WrittenMonthRegex}))\b
  references: [ WrittenMonthRegex, YearRegex ]
OneWordPeriodRegex: !nestedRegex
  def: \b((((the\s+)?month of\s+)?({RelativeRegex}\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sep|Sept))|(month|year) to date|({RelativeRegex}\s+)?(weekend|week|month|year)(\s+{AfterNextSuffixRegex})?)\b
  references: [ RelativeRegex, AfterNextSuffixRegex ]
MonthNumWithYear: !nestedRegex
  def: ({YearNumRegex}(\s*)[/\-\.](\s*){MonthNumRegex})|({MonthNumRegex}(\s*)[/\-](\s*){YearNumRegex})
  references: [ YearNumRegex, MonthNumRegex ]
WeekOfMonthRegex: !nestedRegex
  def: (?<wom>(the\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\s+week\s+{MonthSuffixRegex})
  references: [ MonthSuffixRegex ]
WeekOfYearRegex: !nestedRegex
  def: (?<woy>(the\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\s+week(\s+of)?\s+({YearRegex}|{RelativeRegex}\s+year))
  references: [ YearRegex, RelativeRegex ]
FollowedDateUnit: !nestedRegex
  def: ^\s*{DateUnitRegex}
  references: [ DateUnitRegex ]
NumberCombinedWithDateUnit: !nestedRegex
  def: \b(?<num>\d+(\.\d*)?){DateUnitRegex}
  references: [ DateUnitRegex ]
QuarterTermRegex: !simpleRegex
  def: (((?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)\s+quarter)|(Q(?<number>[1-4])))
QuarterRegex: !nestedRegex
  def: (the\s+)?{QuarterTermRegex}((\s+of|\s*,\s*)?\s+({YearRegex}|{RelativeRegex}\s+year))?
  references: [ YearRegex, RelativeRegex, QuarterTermRegex ]
QuarterRegexYearFront: !nestedRegex
  def: ({YearRegex}|{RelativeRegex}\s+year)\s+(the\s+)?{QuarterTermRegex}
  references: [ YearRegex, RelativeRegex, QuarterTermRegex ]
HalfYearTermRegex: !simpleRegex
  def: (?<cardinal>first|1st|second|2nd)\s+half
HalfYearFrontRegex: !nestedRegex
  def: (?<year>((1[5-9]|20)\d{2})|2100)\s*(the\s+)?H(?<number>[1-2])
  references: [ YearRegex ]
HalfYearBackRegex: !nestedRegex
  def: (the\s+)?(H(?<number>[1-2])|({HalfYearTermRegex}))(\s+of|\s*,\s*)?\s+({YearRegex})
  references: [ YearRegex, HalfYearTermRegex ]
HalfYearRelativeRegex: !nestedRegex
  def: (the\s+)?{HalfYearTermRegex}(\s+of|\s*,\s*)?\s+({RelativeRegex}\s+year)
  references: [ RelativeRegex, HalfYearTermRegex ]
AllHalfYearRegex: !nestedRegex
  def: ({HalfYearFrontRegex})|({HalfYearBackRegex})|({HalfYearRelativeRegex})
  references: [ HalfYearFrontRegex, HalfYearBackRegex, HalfYearRelativeRegex ]
EarlyPrefixRegex: !simpleRegex
  def: ?<EarlyPrefix>early|beginning of|start of
MidPrefixRegex: !simpleRegex
  def: ?<MidPrefix>mid|middle of
LaterPrefixRegex: !simpleRegex
  def: ?<LatePrefix>late|later|end of
PrefixPeriodRegex: !nestedRegex
  def: (({EarlyPrefixRegex})|({MidPrefixRegex})|({LaterPrefixRegex}))
  references: [EarlyPrefixRegex, MidPrefixRegex, LaterPrefixRegex]
SeasonDescRegex: !simpleRegex
  def: (?<seas>spring|summer|fall|autumn|winter)
SeasonRegex: !nestedRegex
  def: \b(?<season>({PrefixPeriodRegex}\s+)?({RelativeRegex}\s+)?{SeasonDescRegex}((\s+of|\s*,\s*)?\s+({YearRegex}|{RelativeRegex}\s+year))?)\b
  references: [ YearRegex, RelativeRegex, SeasonDescRegex, PrefixPeriodRegex ]
WhichWeekRegex: !simpleRegex
  def: (week)(\s*)(?<number>\d\d|\d|0\d)
WeekOfRegex: !simpleRegex
  def: (the\s+)?(week)(\s+of)
MonthOfRegex: !simpleRegex
  def: (month)(\s*)(of)
MonthRegex: !simpleRegex
  def: (?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep)
#Cases collected from mined data 
AmbiguousMonthP0Regex: !simpleRegex
  def: \b((^may i)|(i|you|he|she|we|they)\s+may|(may\s+((((also|not|(also not)|well)\s+)?(be|contain|constitute|email|e-mail|take|have|result|involve|get|work|reply))|(or may not))))\b
AmDescRegex: !simpleRegex
  def: (am\b|a\.m\.|a m\b|a\. m\.|a\.m\b|a\. m\b|a m\b)
PmDescRegex: !simpleRegex
  def: (pm\b|p\.m\.|p\b|p m\b|p\. m\.|p\.m\b|p\. m\b|p m\b)
#This is a look-behind assertion. Some cases should extract two digits as year like 11/25/16, where 16 means 2016. 
#The assertion determines if not connected with am/pm or hour separator (:), which should be a time.
DateYearRegex: !nestedRegex
  def: (?<year>((1\d|20)\d{2})|2100|((9\d|0\d|1\d|2\d)\b(?!(\s*((\:)|{AmDescRegex}|{PmDescRegex})))))
  references: [ DescRegex, AmDescRegex, PmDescRegex ]
YearSuffix: !nestedRegex
  def: (,?\s*({DateYearRegex}|{FullTextYearRegex}))
  references: [ DateYearRegex, FullTextYearRegex ]
OnRegex: !nestedRegex
  def: (?<=\bon\s+)({DayRegex}s?)\b
  references: [ DayRegex ]
RelaxedOnRegex: !simpleRegex
  def: (?<=\b(on|at|in)\s+)((?<day>10th|11th|11st|12nd|12th|13rd|13th|14th|15th|16th|17th|18th|19th|1st|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|2nd|30th|31st|3rd|4th|5th|6th|7th|8th|9th)s?)\b
ThisRegex: !nestedRegex
  def: \b((this(\s*week)?(\s*on)?\s+){WeekDayRegex})|({WeekDayRegex}((\s+of)?\s+this\s*week))\b
  references: [ WeekDayRegex ]
LastDateRegex: !nestedRegex
  def: \b({PastPrefixRegex}(\s*week)?\s+{WeekDayRegex})|({WeekDayRegex}(\s+last\s*week))\b
  references: [ PastPrefixRegex, WeekDayRegex ]
NextDateRegex: !nestedRegex
  def: \b({NextPrefixRegex}(\s*week(\s*on)?)?\s+{WeekDayRegex})|((on\s+)?{WeekDayRegex}((\s+of)?\s+next\s*week))\b
  references: [ NextPrefixRegex, WeekDayRegex ]
SpecialDayRegex: !nestedRegex
  def: \b((the\s+)?day before yesterday|(the\s+)?day after (tomorrow|tmr)|((the\s+)?{RelativeRegex}\s+day)|yesterday|tomorrow|tmr|today)\b
  references: [ RelativeRegex]
SpecialDayWithNumRegex: !nestedRegex
  def: \b((?<number>{WrittenNumRegex})\s+days?\s+from\s+(?<day>yesterday|tomorrow|tmr|today))\b
  references: [ WrittenNumRegex ]
RelativeDayRegex: !nestedRegex
  def: \b(((the\s+)?{RelativeRegex}\s+day))\b
  references: [ RelativeRegex]
SetWeekDayRegex: !simpleRegex
  def: \b(?<prefix>on\s+)?(?<weekday>morning|afternoon|evening|night|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)s\b
WeekDayOfMonthRegex: !nestedRegex
  def: (?<wom>(the\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\s+{WeekDayRegex}\s+{MonthSuffixRegex})
  references: [ WeekDayRegex, MonthSuffixRegex ]
SpecialDate: !nestedRegex
  def: (?=\b(on|at)\s+the\s+){DayRegex}\b
  references: [ DayRegex ]
DateExtractor1: !nestedRegex
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{MonthRegex}(\.)?\s*[/\\\.\-]?\s*{DayRegex}(\.)?\b
  references: [ WeekDayRegex, MonthRegex, DayRegex ]
DateExtractor2: !nestedRegex
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{MonthRegex}(\.)?\s*[\.\-]?\s*{DayRegex}(\.)?(\s+|\s*,\s*|\s+of\s+){DateYearRegex}\b
  references: [ WeekDayRegex, MonthRegex, DayRegex, DateYearRegex ]
DateExtractor3: !nestedRegex
  def: \b({WeekDayRegex}(\s+|\s*,\s*))?{DayRegex}(\.)?(\s+|\s*,\s*|\s+of\s+|\s*-\s*){MonthRegex}(\.)?((\s+|\s*,\s*){DateYearRegex})?\b
  references: [ WeekDayRegex, DayRegex, MonthRegex, DateYearRegex ]
DateExtractor4: !nestedRegex
  def: \b{MonthNumRegex}\s*[/\\\-]\s*{DayRegex}(\.)?\s*[/\\\-]\s*{DateYearRegex}
  references: [ MonthNumRegex, DayRegex, DateYearRegex ]
DateExtractor5: !nestedRegex
  def: \b{DayRegex}\s*[/\\\-]\s*{MonthNumRegex}\s*[/\\\-]\s*{DateYearRegex}
  references: [ DayRegex, MonthNumRegex, DateYearRegex ]
DateExtractor6: !nestedRegex
  def: (?<=\b(on|in|at)\s+){MonthNumRegex}[\-\.]{DayRegex}\b
  references: [ MonthNumRegex, DayRegex ]
DateExtractor7: !nestedRegex
  def: \b{MonthNumRegex}\s*/\s*{DayRegex}((\s+|\s*,\s*|\s+of\s+){DateYearRegex})?\b
  references: [ MonthNumRegex, DayRegex, DateYearRegex ]
DateExtractor8: !nestedRegex
  def: (?<=\b(on|in|at)\s+){DayRegex}[\\\-]{MonthNumRegex}\b
  references: [ DayRegex, MonthNumRegex ]
DateExtractor9: !nestedRegex
  def: \b{DayRegex}\s*/\s*{MonthNumRegex}((\s+|\s*,\s*|\s+of\s+){DateYearRegex})?\b
  references: [ DayRegex, MonthNumRegex, DateYearRegex ]
DateExtractorA: !nestedRegex
  def: \b{DateYearRegex}\s*[/\\\-]\s*{MonthNumRegex}\s*[/\\\-]\s*{DayRegex}
  references: [ DateYearRegex, MonthNumRegex, DayRegex ]
OfMonth: !nestedRegex
  def: ^\s*of\s*{MonthRegex}
  references: [ MonthRegex ]
MonthEnd: !nestedRegex
  def: '{MonthRegex}\s*(the)?\s*$'
  references: [ MonthRegex ]
WeekDayEnd: !nestedRegex
  def: '{WeekDayRegex}\s*,?\s*$'
  references: [ WeekDayRegex ]
RangeUnitRegex: !simpleRegex
  def: \b(?<unit>years|year|months|month|weeks|week)\b
OclockRegex: !simpleRegex
  def: (?<oclock>o\s*’\s*clock|o\s*‘\s*clock|o\s*'\s*clock|o\s*clock)
DescRegex: !nestedRegex
  def: ((({OclockRegex}\s+)?(?<desc>ampm|am\b|a\.m\.|a m\b|a\. m\.|a\.m\b|a\. m\b|a m\b|pm\b|p\.m\.|p m\b|p\. m\.|p\.m\b|p\. m\b|p\b|p m\b))|{OclockRegex})
  references: [ OclockRegex ]
HourNumRegex: !simpleRegex
  def: \b(?<hournum>zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\b
MinuteNumRegex: !simpleRegex
  def: (?<minnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)
DeltaMinuteNumRegex: !simpleRegex
  def: (?<deltaminnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)
PmRegex: !simpleRegex
  def: (?<pm>(((at|in|around|on|for)\s+(the\s+)?)?(afternoon|evening|midnight|lunchtime))|((at|in|around|on|for)\s+(the\s+)?night))
PmRegexFull: !simpleRegex
  def: (?<pm>((at|in|around|on|for)\s+(the\s+)?)?(afternoon|evening|midnight|night|lunchtime))
AmRegex: !simpleRegex
  def: (?<am>((at|in|around|on|for)\s+(the\s+)?)?(morning))
LunchRegex: !simpleRegex
  def: \b(lunchtime)\b
NightRegex: !simpleRegex
  def: \b(midnight|night)\b
CommonDatePrefixRegex: !simpleRegex
  def: ^[\.]
LessThanOneHour: !nestedRegex
  def: (?<lth>(a\s+)?quarter|three quarter(s)?|half( an hour)?|{BaseDateTime.DeltaMinuteRegex}(\s+(minute|minutes|min|mins))|{DeltaMinuteNumRegex}(\s+(minute|minutes|min|mins)))
  references: [ BaseDateTime.DeltaMinuteRegex, DeltaMinuteNumRegex ]
WrittenTimeRegex: !nestedRegex
  def: (?<writtentime>{HourNumRegex}\s+({MinuteNumRegex}|(?<tens>twenty|thirty|forty|fourty|fifty)\s+{MinuteNumRegex}))
  references: [ HourNumRegex, MinuteNumRegex ]
TimePrefix: !nestedRegex
  def: (?<prefix>({LessThanOneHour} past|{LessThanOneHour} to))
  references: [ LessThanOneHour ]
TimeSuffix: !nestedRegex
  def: (?<suffix>{AmRegex}|{PmRegex}|{OclockRegex})
  references: [ AmRegex, PmRegex, OclockRegex ]
TimeSuffixFull: !nestedRegex
  def: (?<suffix>{AmRegex}|{PmRegexFull}|{OclockRegex})
  references: [ AmRegex, PmRegexFull, OclockRegex ]
BasicTime: !nestedRegex
  def: \b(?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex})
  references: [ WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, BaseDateTime.SecondRegex ]
MidnightRegex: !simpleRegex
  def: (?<midnight>midnight|mid-night|mid night)
MidmorningRegex: !simpleRegex
  def: (?<midmorning>midmorning|mid-morning|mid morning)
MidafternoonRegex: !simpleRegex
  def: (?<midafternoon>midafternoon|mid-afternoon|mid afternoon)
MiddayRegex: !simpleRegex
  def: (?<midday>midday|mid-day|mid day|((12\s)?noon))
MidTimeRegex: !nestedRegex
  def: (?<mid>({MidnightRegex}|{MidmorningRegex}|{MidafternoonRegex}|{MiddayRegex}))
  references: [ MidnightRegex, MidmorningRegex, MidafternoonRegex, MiddayRegex ]
AtRegex: !nestedRegex
  def: \b(((?<=\bat\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}|{MidTimeRegex}))|{MidTimeRegex})\b
  references: [ WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, MidTimeRegex ]
IshRegex: !nestedRegex
  def: '\b({BaseDateTime.HourRegex}(-|——)?ish|noonish|noon)\b'
  references: [ BaseDateTime.HourRegex ]
TimeUnitRegex: !simpleRegex
  def: ([^A-Za-z]{1,}|\b)(?<unit>hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\b
RestrictedTimeUnitRegex: !simpleRegex
  def: (?<unit>hour|minute)\b
FivesRegex: !simpleRegex
  def: (?<tens>(fifteen|twenty(\s*five)?|thirty(\s*five)?|forty(\s*five)?|fourty(\s*five)?|fifty(\s*five)?|ten|five))\b
HourRegex: !nestedRegex
  def: \b{BaseDateTime.HourRegex}
  references: [ BaseDateTime.HourRegex ]
PeriodHourNumRegex: !simpleRegex
  def: \b(?<hour>twenty one|twenty two|twenty three|twenty four|zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty)\b
ConnectNumRegex: !nestedRegex
  def: '{BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\s*{DescRegex}'
  references: [ BaseDateTime.HourRegex, DescRegex ]
TimeRegex1: !nestedRegex
  def: \b({TimePrefix}\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\s*{DescRegex}
  references: [ TimePrefix, WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, DescRegex ]
TimeRegex2: !nestedRegex
  def: (\b{TimePrefix}\s+)?(T)?{BaseDateTime.HourRegex}(\s*)?:(\s*)?{BaseDateTime.MinuteRegex}((\s*)?:(\s*)?{BaseDateTime.SecondRegex})?((\s*{DescRegex})|\b)
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, BaseDateTime.SecondRegex, DescRegex ]
TimeRegex3: !nestedRegex
  def: (\b{TimePrefix}\s+)?{BaseDateTime.HourRegex}\.{BaseDateTime.MinuteRegex}(\s*{DescRegex})
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, DescRegex ]
TimeRegex4: !nestedRegex
  def: \b{TimePrefix}\s+{BasicTime}(\s*{DescRegex})?\s+{TimeSuffix}\b
  references: [ TimePrefix, BasicTime, DescRegex, TimeSuffix ]
TimeRegex5: !nestedRegex
  def: \b{TimePrefix}\s+{BasicTime}((\s*{DescRegex})|\b)
  references: [ TimePrefix, BasicTime, DescRegex ]
TimeRegex6: !nestedRegex
  def: '{BasicTime}(\s*{DescRegex})?\s+{TimeSuffix}\b'
  references: [ BasicTime, DescRegex, TimeSuffix ]
TimeRegex7: !nestedRegex
  def: \b{TimeSuffixFull}\s+at\s+{BasicTime}((\s*{DescRegex})|\b)
  references: [ TimeSuffixFull, BasicTime, DescRegex ]
TimeRegex8: !nestedRegex
  def: \b{TimeSuffixFull}\s+{BasicTime}((\s*{DescRegex})|\b)
  references: [ TimeSuffixFull, BasicTime, DescRegex ]
TimeRegex9: !nestedRegex
  def: \b{PeriodHourNumRegex}\s+{FivesRegex}((\s*{DescRegex})|\b)
  references: [ PeriodHourNumRegex, FivesRegex, DescRegex ]
TimeRegex10: !nestedRegex
  def: (\b{TimePrefix}\s+)?{BaseDateTime.HourRegex}(\s*h\s*){BaseDateTime.MinuteRegex}(\s*{DescRegex})?
  references: [ TimePrefix, BaseDateTime.HourRegex, BaseDateTime.MinuteRegex, DescRegex ]
PureNumFromTo: !nestedRegex
  def: ((from|between)\s+)?({HourRegex}|{PeriodHourNumRegex})(\s*(?<leftDesc>{DescRegex}))?\s*{TillRegex}\s*({HourRegex}|{PeriodHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?
  references: [ HourRegex, PeriodHourNumRegex, DescRegex, TillRegex, PmRegex, AmRegex ]
PureNumBetweenAnd: !nestedRegex
  def: (between\s+)({HourRegex}|{PeriodHourNumRegex})(\s*(?<leftDesc>{DescRegex}))?\s*{RangeConnectorRegex}\s*({HourRegex}|{PeriodHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?
  references: [ HourRegex, PeriodHourNumRegex, DescRegex, PmRegex, AmRegex, RangeConnectorRegex ]
PrepositionRegex: !simpleRegex
  def: (?<prep>^(at|on|of)(\s+the)?$)
TimeOfDayRegex: !simpleRegex
  def: \b(?<timeOfDay>((((in\s+(the)?\s+)?((?<early>early(\s+|-))|(?<late>late(\s+|-)))?(morning|afternoon|night|evening)))|(((in\s+(the)?\s+)?)(daytime)))s?)\b
SpecificTimeOfDayRegex: !nestedRegex
  def: \b(({StrictRelativeRegex}\s+{TimeOfDayRegex})\b|\btonight)s?\b
  references: [ TimeOfDayRegex, StrictRelativeRegex ]
TimeFollowedUnit: !nestedRegex
  def: ^\s*{TimeUnitRegex}
  references: [ TimeUnitRegex ]
TimeNumberCombinedWithUnit: !nestedRegex
  def: \b(?<num>\d+(\.\d*)?){TimeUnitRegex}
  references: [ TimeUnitRegex ]
NowRegex: !simpleRegex
  def: \b(?<now>(right\s+)?now|as soon as possible|asap|recently|previously)\b
SuffixRegex: !simpleRegex
  def: ^\s*(in the\s+)?(morning|afternoon|evening|night)\b
DateTimeTimeOfDayRegex: !simpleRegex
  def: \b(?<timeOfDay>morning|afternoon|night|evening)\b
DateTimeSpecificTimeOfDayRegex: !nestedRegex
  def: \b(({RelativeRegex}\s+{DateTimeTimeOfDayRegex})\b|\btonight)\b
  references: [ DateTimeTimeOfDayRegex, RelativeRegex ]
TimeOfTodayAfterRegex: !nestedRegex
  def: ^\s*(,\s*)?(in\s+)?{DateTimeSpecificTimeOfDayRegex}
  references: [ DateTimeSpecificTimeOfDayRegex ]
TimeOfTodayBeforeRegex: !nestedRegex
  def: '{DateTimeSpecificTimeOfDayRegex}(\s*,)?(\s+(at|around|in|on))?\s*$'
  references: [ DateTimeSpecificTimeOfDayRegex ]
SimpleTimeOfTodayAfterRegex: !nestedRegex
  def: ({HourNumRegex}|{BaseDateTime.HourRegex})\s*(,\s*)?(in\s+)?{DateTimeSpecificTimeOfDayRegex}
  references: [ HourNumRegex, BaseDateTime.HourRegex, DateTimeSpecificTimeOfDayRegex ]
SimpleTimeOfTodayBeforeRegex: !nestedRegex
  def: '{DateTimeSpecificTimeOfDayRegex}(\s*,)?(\s+(at|around))?\s*({HourNumRegex}|{BaseDateTime.HourRegex})'
  references: [ DateTimeSpecificTimeOfDayRegex, HourNumRegex, BaseDateTime.HourRegex ]
TheEndOfRegex: !simpleRegex
  def: (the\s+)?end of(\s+the)?\s*$
PeriodTimeOfDayRegex: !simpleRegex
  def: \b((in\s+(the)?\s+)?((?<early>early(\s+|-))|(?<late>late(\s+|-)))?(?<timeOfDay>morning|afternoon|night|evening))\b
PeriodSpecificTimeOfDayRegex: !nestedRegex
  def: \b(({StrictRelativeRegex}\s+{PeriodTimeOfDayRegex})\b|\btonight)\b
  references: [ PeriodTimeOfDayRegex, StrictRelativeRegex ]
PeriodTimeOfDayWithDateRegex: !nestedRegex
 def: \b(({TimeOfDayRegex}(\s+(on|of))?))\b
 references: [ TimeOfDayRegex]
DurationUnitRegex: !simpleRegex
  def: (?<unit>years|year|months|month|weeks|week|days|day|hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\b
SuffixAndRegex: !simpleRegex
  def: (?<suffix>\s*(and)\s+((an|a)\s+)?(?<suffix_num>half|quarter))
PeriodicRegex: !simpleRegex
  def: \b(?<periodic>daily|monthly|weekly|biweekly|yearly|annually|annual)\b
EachUnitRegex: !nestedRegex
  def: (?<each>(each|every)(?<other>\s+other)?\s*{DurationUnitRegex})
  references: [ DurationUnitRegex ]
EachPrefixRegex: !simpleRegex
  def: \b(?<each>(each|(every))\s*$)
SetEachRegex: !simpleRegex
  def: \b(?<each>(each|(every))\s*)
SetLastRegex: !simpleRegex
  def: (?<last>next|upcoming|this|last|past|previous|current)
EachDayRegex: !simpleRegex
  def: ^\s*(each|every)\s*day\b
DurationFollowedUnit: !nestedRegex
  def: ^\s*{SuffixAndRegex}?(\s+|-)?{DurationUnitRegex}
  references: [ SuffixAndRegex, DurationUnitRegex ]
NumberCombinedWithDurationUnit: !nestedRegex
  def: \b(?<num>\d+(\.\d*)?)(-)?{DurationUnitRegex}
  references: [ DurationUnitRegex ]
AnUnitRegex: !nestedRegex
  def: \b(((?<half>half\s+)?(an|a))|(an|a))\s+{DurationUnitRegex}
  references: [ DurationUnitRegex ]
AllRegex: !simpleRegex
  def: \b(?<all>(all|full|whole)(\s+|-)(?<unit>year|month|week|day))\b
HalfRegex: !simpleRegex
  def: (((a|an)\s*)|\b)(?<half>half\s+(?<unit>year|month|week|day|hour))\b
ConjunctionRegex: !simpleRegex
  def: \b((and(\s+for)?)|with)\b
HolidayRegex1: !nestedRegex
  def: \b(?<holiday>clean monday|good friday|ash wednesday|mardi gras|washington's birthday|mao's birthday|chinese new Year|new years' eve|new year's eve|new year 's eve|new years eve|new year eve|new years'|new year's|new year 's|new years|new year|mayday|yuan dan|april fools|christmas eve|christmas|xmas|thanksgiving|halloween|yuandan|easter)(\s+(of\s+)?({YearRegex}|{RelativeRegex}\s+year))?\b
  references: [ YearRegex, RelativeRegex ]
HolidayRegex2: !nestedRegex
  def: \b(?<holiday>martin luther king|martin luther king jr|all saint's|tree planting day|white lover|st patrick|st george|cinco de mayo|independence|us independence|all hallow|all souls|guy fawkes)(\s+(of\s+)?({YearRegex}|{RelativeRegex}\s+year))?\b
  references: [ YearRegex, RelativeRegex ]
HolidayRegex3: !nestedRegex
  def: (?<holiday>(canberra|easter|columbus|thanks\s*giving|christmas|xmas|labour|mother's|mother|mothers|father's|father|fathers|female|single|teacher's|youth|children|arbor|girls|chsmilbuild|lover|labor|inauguration|groundhog|valentine's|baptiste|bastille|halloween|veterans|memorial|mid(-| )autumn|moon|spring|lantern|qingming|dragon boat|new years'|new year's|new year 's|new years|new year)\s+(day))(\s+(of\s+)?({YearRegex}|{RelativeRegex}\s+year))?
  references: [ YearRegex, RelativeRegex ]
DateTokenPrefix: 'on '
TimeTokenPrefix: 'at '
TokenBeforeDate: 'on '
TokenBeforeTime: 'at '
AMTimeRegex: !simpleRegex
  def: (?<am>morning)
PMTimeRegex: !simpleRegex
  def: \b(?<pm>afternoon|evening|night)\b
BeforeRegex: !simpleRegex
  def: \b(before|in advance of|prior to|(no later|earlier|sooner) than|ending (with|on)|by|till|til|until)\b
AfterRegex: !simpleRegex
  def: \b(after(?!\s+or equal to)|(?<!no\s+)later than)\b
SinceRegex: !simpleRegex
  def: \b(since|after or equal to|starting (from|on|with))\b
AgoRegex: !simpleRegex
  def: \b(ago)\b
LaterRegex: !simpleRegex
  def: \b(later|from now)\b
InConnectorRegex: !simpleRegex
  def: \b(in)\b
WithinNextPrefixRegex: !nestedRegex
  def: \b(within(\s+the)?(\s+{NextPrefixRegex})?)\b
  references: [ NextPrefixRegex ]
AmPmDescRegex: !simpleRegex
  def: (ampm)
MorningStartEndRegex: !nestedRegex
  def: (^(morning|{AmDescRegex}))|((morning|{AmDescRegex})$)
  references: [ AmDescRegex ]
AfternoonStartEndRegex: !nestedRegex
  def: (^(afternoon|{PmDescRegex}))|((afternoon|{PmDescRegex})$)
  references: [ PmDescRegex ]
EveningStartEndRegex: !simpleRegex
  def: (^(evening))|((evening)$)
NightStartEndRegex: !simpleRegex
  def: (^(overnight|tonight|night))|((overnight|tonight|night)$)
InexactNumberRegex: !simpleRegex
  def: \b(a few|few|some|several|(?<NumTwoTerm>(a\s+)?couple of))\b
InexactNumberUnitRegex: !nestedRegex
  def: ({InexactNumberRegex})\s+({DurationUnitRegex})
  references: [InexactNumberRegex, DurationUnitRegex]
RelativeTimeUnitRegex: !nestedRegex
  def: ((({NextPrefixRegex}|{PastPrefixRegex}|{ThisPrefixRegex})\s+({TimeUnitRegex}))|((the|my))\s+({RestrictedTimeUnitRegex}))
  references: [NextPrefixRegex, PastPrefixRegex, ThisPrefixRegex, TimeUnitRegex, RestrictedTimeUnitRegex]
RelativeDurationUnitRegex: !nestedRegex
  def: (((?<=({NextPrefixRegex}|{PastPrefixRegex}|{ThisPrefixRegex})\s+)({DurationUnitRegex}))|((the|my))\s+({RestrictedTimeUnitRegex}))
  references: [NextPrefixRegex, PastPrefixRegex, ThisPrefixRegex, DurationUnitRegex, RestrictedTimeUnitRegex]
ConnectorRegex: !simpleRegex
  def: ^(-|,|for|t|around)$
FromToRegex: !simpleRegex
  def: \b(from).+(to)\b.+
SingleAmbiguousMonthRegex: !simpleRegex
  def: ^(the\s+)?(may|march)$
PrepositionSuffixRegex: !simpleRegex
  def: \b(on|in|at|around|from|to)$
FlexibleDayRegex: !simpleRegex
  def: (?<DayOfMonth>([A-Za-z]+\s)?[A-Za-z\d]+)
ForTheRegex: !nestedRegex
  def: \b(((for the {FlexibleDayRegex})|(on (the\s+)?{FlexibleDayRegex}(?<=(st|nd|rd|th))))(?<end>\s*(,|\.|!|\?|$)))
  references: [FlexibleDayRegex]
WeekDayAndDayOfMonthRegex: !nestedRegex
  def: \b{WeekDayRegex}\s+(the\s+{FlexibleDayRegex})\b
  references: [WeekDayRegex, FlexibleDayRegex]
RestOfDateRegex: !simpleRegex
  def: \bRest\s+(of\s+)?((the|my|this|current)\s+)?(?<duration>week|month|year)\b
RestOfDateTimeRegex: !simpleRegex
  def: \bRest\s+(of\s+)?((the|my|this|current)\s+)?(?<unit>day)\b
MealTimeRegex: !simpleRegex
  def: \b(at\s+)?(?<mealTime>lunchtime)\b
NumberEndingPattern: !nestedRegex
  def: ^(\s+(?<meeting>meeting|appointment|conference|call|skype call)\s+to\s+(?<newTime>{PeriodHourNumRegex}|{HourRegex})((\.)?$|(\.,|,|!|\?)))
  references: [PeriodHourNumRegex, HourRegex]
OneOnOneRegex: !simpleRegex
  def: \b(1\s*:\s*1)|(one (on )?one|one\s*-\s*one|one\s*:\s*one)\b
LaterEarlyPeriodRegex: !nestedRegex
  def: \b({PrefixPeriodRegex})\s+(?<suffix>{OneWordPeriodRegex})\b
  references: [PrefixPeriodRegex, OneWordPeriodRegex]
WeekWithWeekDayRangeRegex: !nestedRegex
  def: \b((?<week>({NextPrefixRegex}|{PastPrefixRegex}|this)\s+week)((\s+between\s+{WeekDayRegex}\s+and\s+{WeekDayRegex})|(\s+from\s+{WeekDayRegex}\s+to\s+{WeekDayRegex})))\b
  references: [NextPrefixRegex, PastPrefixRegex, WeekDayRegex]
GeneralEndingRegex: !simpleRegex
  def: ^\s*((\.,)|\.|,|!|\?)?\s*$
MiddlePauseRegex: !simpleRegex
  def: \s*(,)\s*
DurationConnectorRegex: !simpleRegex
  def: ^\s*(?<connector>\s+|and|,)\s*$
PrefixArticleRegex: !simpleRegex
  def: \bthe\s+
OrRegex: !simpleRegex
  def: \s*((\b|,\s*)(or|and)\b|,)\s*
YearPlusNumberRegex: !nestedRegex
  def: \b(Year\s+((?<year>(\d{3,4}))|{FullTextYearRegex}))\b
  references: [ FullTextYearRegex ]
NumberAsTimeRegex: !nestedRegex
  def: \b({WrittenTimeRegex}|{PeriodHourNumRegex}|{BaseDateTime.HourRegex})\b
  references: [ WrittenTimeRegex, PeriodHourNumRegex, BaseDateTime.HourRegex ]
TimeBeforeAfterRegex: !nestedRegex
  def: \b(((?<=\b(before|no later than|by|after)\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}|{MidTimeRegex}))|{MidTimeRegex})\b
  references: [ WrittenTimeRegex, HourNumRegex, BaseDateTime.HourRegex, MidTimeRegex ]
DateNumberConnectorRegex: !simpleRegex
  def: ^\s*(?<connector>\s+at)\s*$
DecadeRegex: !simpleRegex
  def: (?<decade>noughties|twenties|thirties|forties|fifties|sixties|seventies|eighties|nineties|two thousands)
DecadeWithCenturyRegex: !nestedRegex
  def: (the\s+)?(((?<century>\d|1\d|2\d)?(')?(?<decade>\d0)(')?s)|(({CenturyRegex}(\s+|-)(and\s+)?)?{DecadeRegex})|({CenturyRegex}(\s+|-)(and\s+)?(?<decade>tens|hundreds)))
  references: [ CenturyRegex, DecadeRegex ]
RelativeDecadeRegex: !nestedRegex
  def: \b((the\s+)?{RelativeRegex}\s+((?<number>[\w,]+)\s+)?decades?)\b
  references: [ RelativeRegex ]
YearAfterRegex: !simpleRegex
  def: \b(or\s+(above|after))\b
YearPeriodRegex: !nestedRegex
  def: (((from|during|in|between)\s+)?{YearRegex}\s*{TillRegex}\s*{YearRegex})
  references: [ YearRegex, TillRegex ]
UnitMap: !dictionary
  types: [ string, string ]
  entries:
    jaren: Y
    jaar: Y
    maanden: MON
    maand: MON
    weken: W
    week: W
    dagen: D
    dag: D
    uren: H
    uur: H
    u: H
    minuten: M
    minuut: M
    min: M
    secondes: S
    seconde: S
    secs: S
    sec: S
UnitValueMap: !dictionary
  types: [ string, long ]
  entries:
    jaren: 31536000
    jaar: 31536000
    maanden: 2592000
    maand: 2592000
    weken: 604800
    week: 604800
    dagen: 86400
    dag: 86400
    uren: 3600
    uur: 3600
    u: 3600
    minuten: 60
    minuut: 60
    min: 60
    secondes: 1
    seconde: 1
    secs: 1
    sec: 1
SeasonMap: !dictionary
  types: [ string, string ]
  entries:
    lente: SP
    zomer: SU
    herfst: FA
    winter: WI
SeasonValueMap: !dictionary
  types: [ string, int ]
  entries:
    SP: 3
    SU: 6
    FA: 9
    WI: 12
CardinalMap: !dictionary
  types: [ string, int]
  entries:
    first: 1
    1st: 1
    second: 2
    2nd: 2
    third: 3
    3rd: 3
    fourth: 4
    4th: 4
    fifth: 5
    5th: 5
DayOfWeek: !dictionary
  types: [ string, int ]
  entries: 
    maandag: 1
    dinsdag: 2
    woensdag: 3
    donderdag: 4
    vrijdag: 5
    zaterdag: 6
    zondag: 0
    ma: 1
    ma.: 1 #TODO Is it also required to add a .? (like the German DateTime file)
    di: 2
    di.: 2
    wo: 3
    wo.: 3
    woe: 3
    woe.: 3
    do: 4
    do.: 4
    vr: 5
    vr.: 5
    vrij: 5
    vrij.: 5
    za: 6
    za.: 6
    zat: 6
    zat.: 6
    zo: 0
    zo.: 0
    zon: 0
    zon.: 0
MonthOfYear: !dictionary
  types: [ string, int ]
  entries:
    'januari': 1
    'februari': 2
    'maart': 3
    'april': 4
    'mei': 5
    'juni': 6
    'juli': 7
    'augustus': 8
    'september': 9
    'oktober': 10
    'november': 11
    'december': 12
    'jan': 1
    'feb': 2
    'mar': 3
    'apr': 4
    'jun': 6
    'jul': 7
    'aug': 8
    'sep': 9
    'sept': 9
    'oct': 10
    'okt': 10
    'nov': 11
    'dec': 12
    '1': 1
    '2': 2
    '3': 3
    '4': 4
    '5': 5
    '6': 6
    '7': 7
    '8': 8
    '9': 9
    '10': 10
    '11': 11
    '12': 12
    '01': 1
    '02': 2
    '03': 3
    '04': 4
    '05': 5
    '06': 6
    '07': 7
    '08': 8
    '09': 9
Numbers: !dictionary
  types: [ string, int ]
  entries:
    'nul': 0
    'een': 1
    'één': 1
    'twee': 2
    'drie': 3
    'vier': 4
    'vijf': 5
    'zes': 6
    'zeven': 7
    'acht': 8
    'negen': 9
    'tien': 10
    'elf': 11
    'twaalf': 12
    'dertien': 13
    'veertien': 14
    'vijftien': 15
    'zestien': 16
    'zeventien': 17
    'achttien': 18
    'negentien': 19
    'twintig': 20
    'eenentwintig': 21
    'éénentwintig': 21
    'tweeentwintig': 22 # TODO Are both versions required?
    'tweeëntwintig': 22
    'drieëntwintig': 23
    'vierentwintig': 24
    'vijfentwintig': 25
    'zesentwintig': 26
    'zevenentwintig': 27
    'achtentwintig': 28
    'negenentwintig': 29
    'dertig': 30
    'eenendertig': 31
    'tweeëndertig': 32
    'drieëndertig': 33
    'vierendertig': 34
    'vijfendertig': 35
    'zesendertig': 36
    'zevenendertig': 37
    'achtendertig': 38
    'negenendertig': 39
    'veertig': 40
    'eenenveertig': 41
    'tweeënveertig': 42
    'drieënveertig': 43
    'vierenveertig': 44
    'vijfenveertig': 45
    'zesenveertig': 46
    'zevenenveertig': 47
    'achtenveertig': 48
    'negenenveertig': 49
    'eenenvijftig': 50
    'vijftig': 51
    'tweeënvijftig': 52
    'drieënvijftig': 53
    'vierenvijftig': 54
    'vijfenvijftig': 55
    'zesenvijftig': 56
    'zevenenvijftig': 57
    'achtenvijftig': 58
    'negenenvijftig': 59
    'zestig': 60
    'eenenzestig': 61
    'tweeënzestig': 62
    'drieënzestig': 63
    'vierenzestig': 64
    'vijfenzestig': 65
    'zesenzestig': 66
    'zevenenzestig': 67
    'achtenzestig': 68
    'negenenzestig': 69
    'drieënzeventig': 70
    'eenenzeventig': 71
    'tweeënzeventig': 72
    'zeventig': 73
    'vierenzeventig': 74
    'vijfenzeventig': 75
    'zesenzeventig': 76
    'zevenenzeventig': 77
    'achtenzeventig': 78
    'negenenzeventig': 79
    'tachtig': 80
    'eenentachtig': 81
    'tweeëntachtig': 82
    'drieëntachtig': 83
    'vierentachtig': 84
    'vijfentachtig': 85
    'zesentachtig': 86
    'zevenentachtig': 87
    'achtentachtig': 88
    'negenentachtig': 89
    'negentig': 90
    'eenennegentig': 91
    'tweeënnegentig': 92
    'drieënnegentig': 93
    'vierennegentig': 94
    'vijfennegentig': 95
    'zesennegentig': 96
    'zevenennegentig': 97
    'achtennegentig': 98
    'negenennegentig': 99
    'honderd': 100
DayOfMonth: !dictionary
  types: [ string, int ]
  entries:
    'eerste': 1
    '1e': 1
    'tweede': 2
    '2e': 2
    'derde': 3
    '3e': 3
    'vierde': 4
    '4e': 4
    'vijfde': 5
    '5e': 5
    'zesde': 6
    '6e': 6
    'zevende': 7
    '7e': 7
    'achtste': 8
    '8e': 8
    'negende': 9
    '9e': 9
    'tiende': 10
    '10e': 10
    'elfde': 11
    '11e': 11
    'twaalfde': 12
    '12e': 12
    'dertiende': 13
    '13e': 13
    'veertiende': 14
    '14e': 14
    'vijftiende': 15
    '15e': 15
    'zestiende': 16
    '16e': 16
    'zeventiende': 17
    '17e': 17
    'achttiende': 18
    '18e': 18
    'negentiende': 19
    '19e': 19
    'twintigste': 20
    '20e': 20
    'eenentwintigste': 21
    '21e': 21
    'tweeentwintigste': 22
    'tweeëntwintigste': 22
    '22e': 22
    'drieentwintigste': 23
    'drieëntwintigste': 23
    '23e': 23
    'vierentwintigste': 24
    '24e': 24
    'vijfentwintigste': 25
    '25e': 25
    'zesentwintigste': 26
    '26e': 26
    'zevenentwintigste': 27
    '27e': 27
    'achtentwintigste': 28
    '28e': 28
    'negenentwintigste': 29 
    '29e': 29
    'dertigste': 30
    '30e': 30
    'eenendertigste': 31
    '31e': 31
DoubleNumbers: !dictionary
  types: [ string, double ]
  entries: 
    half: 0.5
    quarter: 0.25
HolidayNames: !dictionary
  types: [ string, 'string[]' ]
  entries: 
    easterday: [ pasen ] 
    fathers: [ vaderdag, vadersdag ] 
    mothers: [ moederdag, moedersdag ] 
    thanksgiving: [ thanksgivingday, thanksgiving, dankzeggingsdag ] 
    martinlutherking: [ martinlutherkingday, martinlutherkingjrday ] # TODO or remove?
    washingtonsbirthday: [ washingtonsbirthday, washingtonbirthday ] # TODO or remove?
    canberra: [ canberraday ] # TODO or remove?
    labour: [ dag van de arbeid, dag van den arbeid ]
    columbus: [ columbusday ] # TODO or remove?
    memorial: [ memorialday ] # TODO or remove?
    yuandan: [ yuandan ] # TODO or remove?
    maosbirthday: [ maosbirthday ] # TODO or remove?
    teachersday: [ teachersday, teacherday ] # TODO or remove?
    singleday: [ singleday ] # TODO or remove?
    allsaintsday: [ allsaintsday ] # TODO or remove?
    youthday: [ youthday ] # TODO or remove?
    childrenday: [ childrenday, childday ] # TODO or remove?
    femaleday: [ femaleday, vrouwendag ]
    treeplantingday: [ boomplantdag, boomfeestdag ]
    arborday: [ arborday ] # TODO or remove?
    girlsday: [ girlsday, meisjesdag ]
    whiteloverday: [ whiteloverday ] # TODO or remove?
    loverday: [ loverday ] # TODO or remove?
    christmas: [ kerstfeest, kerstmis, kerst ]
    xmas: [ xmas ]
    newyear: [ oud en nieuw, oud & nieuw ]
    newyearday: [ nieuwjaarsdag ]
    newyearsday: [ nieuwjaarsdag ]
    inaugurationday: [ inaugurationday ] # TODO or remove?
    groundhougday: [ groundhougday, bosmarmottendag ]
    valentinesday: [ valentijnsdag, valetijnsdag ]
    stpatrickday: [ stpatrickday ] # TODO or remove?
    aprilfools: [ aprilfools ] # TODO Remove? Translation would be literally the date
    stgeorgeday: [ sint joris ]
    mayday: [ mayday ]
    cincodemayoday: [ cinco de mayo ]
    baptisteday: [ baptisteday ] # TODO or remove?
    usindependenceday: [ amerikaanse onafhankelijkheidsdag, us onafhankelijkheidsdag ]
    independenceday: [ onafhankelijkheidsdag ]
    bastilleday: [ franse nationale feestdag, bestorming van de bastille ]
    halloweenday: [ halloween, allerheiligenavond ]
    allhallowday: [ allerheiligen ]
    allsoulsday: [ allerzielen ]
    guyfawkesday: [ guy fawkes day, guy fawkes night, bonfire night, firework night ]
    veteransday: [ veteransday, veterans day ] # NOTE Veteranendag (Dutch) is on a different date!
    christmaseve: [ kerstavond ]
    newyeareve: [ oudejaardsavond, silvester, silvesteravond ]
WrittenDecades: !dictionary
  types: [ string, int ]
  entries:
    'jaren 0': 0 
    'jaren nul': 0
    'jaren 10': 10
    'jaren tien': 10 
    'jaren 20': 20
    'jaren twintig': 20
    'twintiger jaren': 20
    'jaren 30': 30
    'jaren dertig': 30
    'dertiger jaren': 30
    'jaren 40': 40
    'jaren veertig': 40
    'veertiger jaren': 40
    'jaren 50': 50
    'jaren vijftig': 50
    'vijftiger jaren': 50
    'jaren 60': 60
    'jaren zestig': 60
    'zestiger jaren': 60
    'jaren 70': 70
    'jaren zeventig': 70
    'zeventiger jaren': 70
    'jaren 80': 80
    'jaren tachtig': 80
    'tachtiger jaren': 80
    'jaren 90': 90
    'jaren negentig': 90
    'negentiger jaren': 90
    #TODO Aanvullen met 19e eeuw etc?
SpecialDecadeCases: !dictionary
  types: [ string, int ]
  entries:
    '21e eeuw': 2000
    'eenentwintigste eeuw': 2000
    'tweeduizend': 2000
DefaultLanguageFallback: 'DMY'
...
